from threading import Thread, Lock
from random import randint
from time import sleep

#número de barbeiros, cadeiras, clientes nas cadeiras e clientes que foram embora e total de atendidos
BARBEIROS = 2
CADEIRAS = 3
CLIENTES = 0
FOI_EMBORA = 0
ATENDIDOS = 0

#tempo (máximo e mínimo) de corte e de chegada de clientes(segundos)
temp_corte_max = 10
temp_corte_min = 2
temp_chegada_max = 4
temp_chegada_min = 1

#atendidos por cada barbeiro
atendidos = []
for i in range(BARBEIROS):
    atendidos.append(0)

#semaforo controla o ato do barbeiro olhar se tem cliente esperando
mutex = Lock()

def entrada_cliente():
    global temp_corte
    global CLIENTES
    global FOI_EMBORA
    global CADEIRAS
    while(True):
        tempo = randint(temp_chegada_min, temp_chegada_max)
        sleep(tempo)
        if(CLIENTES<CADEIRAS):
            CLIENTES+=1
            print("cliente chegou, clientes esperando: ",CLIENTES)
        else:
            FOI_EMBORA += 1
            print("cliente foi embora, perdidos: ",FOI_EMBORA)

def corte_cabelo(i):
    global temp_corte
    global CLIENTES
    global ATENDIDOS
    global atendidos
    while (True):
        mutex.acquire()
        if(CLIENTES>0):
            CLIENTES -=1
            ATENDIDOS +=1
            atendidos[i] +=1
            print("barbeiro ",i,"corte concluido, atendidos : (",atendidos[i],"/",ATENDIDOS,")")
        mutex.release()
        #cortando o cabelo do cliente
        tempo = randint(temp_corte_min, temp_corte_max)
        sleep(tempo)




#entrada de clientes
ent_cliente = Thread(target=entrada_cliente, args=())
ent_cliente.start()


#entrada de barbeiros
barbeiros = []
for i in range(BARBEIROS):
    barbeiros.append(Thread(target=corte_cabelo, args=[i]))
    barbeiros[i].start()







#Luan Ferreira dos Reis
